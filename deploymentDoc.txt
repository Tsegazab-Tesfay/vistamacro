1. Create EC2(Elastic compute): It is a virtual machine:
    # Policy if not created from the previous once
    Policy:
	1. AmazonEC2ContainerRegistryFullAccess
	2. AmazonEC2FullAccess
	3. AmazonS3FullAccess

2. s3 bucket: To store artifact and model in s3 bucket
    bucket name
3. ECR(Elastic container registery): To save docker image
    866852728425.dkr.ecr.eu-north-1.amazonaws.com/vista-macro
	866852728425.dkr.ecr.eu-north-1.amazonaws.com/vista-macro
	866852728425.dkr.ecr.eu-north-1.amazonaws.com/vista-macro


    General description: About the deployment

        1. Build docker image of the source code
        2. Push your docker image to ECR
        3. Launch Your EC2 
        4. Pull Your image from ECR in EC2
        5. Lauch your docker image in EC2



4. Open EC2 and Install docker in EC2 Machine 
	
	
	#optinal
	sudo apt-get update -y
	sudo apt-get upgrade
	
	#required
	curl -fsSL https://get.docker.com -o get-docker.sh
	sudo sh get-docker.sh
	sudo usermod -aG docker ubuntu
	newgrp docker

	yes | sudo apt update
	yes | sudo apt install apache2



7. Configure EC2 as self-hosted runner

setting>actions>runner>new self hosted runner> choose os> 
then run command one by one

8. Setup github secrets

AWS_ACCESS_KEY_ID=

AWS_SECRET_ACCESS_KEY=

AWS_REGION=ap-south-1

AWS_ECR_LOGIN_URI=566373416292.dkr.ecr.ap-south-1.amazonaws.com

ECR_REPOSITORY_NAME=vista-macro

MONGO_DB_URL=







# AWS Certificate Manager
- VPC
- Internet gateway
- Subbet
- RouteTable



temporary-save

# name: workflow

# on:
#   push:
#     branches:
#       - main
#     paths-ignore:
#       - 'README.md'

# permissions:
#   id-token: write
#   contents: read

# jobs:
#   integration:
#     name: Continuous Integration
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       - name: Lint code
#         run: echo "Linting repository"

#       - name: Run unit tests
#         run: echo "Running unit tests"

#   build-and-push-ecr-image:
#     name: Continuous Delivery
#     needs: integration
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       - name: Install Utilities
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y jq unzip
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Build, tag, and push image to Amazon ECR
#         id: build-image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
#           IMAGE_TAG: latest
#         run: |
#           # Build a docker container and
#           # push it to ECR so that it can
#           # be deployed to ECS.
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          
          
#   Continuous-Deployment:
#     needs: build-and-push-ecr-image
#     runs-on: self-hosted
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1
      
      
#       - name: Pull latest images
#         run: |
#          docker pull ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

#       #- name: Stop and remove vista-macro container if running
#       #  run: |
#       #   docker ps -q --filter "name=vista-macro" | grep -q . && docker stop vista-macro && docker rm -fv vista-macro
       
#       - name: Run Docker Image to serve users
#         run: |
#          docker run -d -p 80:80 --name=vista-macro -e 'MONGO_DB_URL=${{ secrets.MONGO_DB_URL }}' -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' -e 'AWS_REGION=${{ secrets.AWS_REGION }}'  ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
      
#       - name: Clean previous images and containers
#         run: |
#             docker system prune -f